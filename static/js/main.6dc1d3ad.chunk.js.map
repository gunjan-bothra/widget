{"version":3,"sources":["assets/images/deepthought.png","serviceWorker.js","components/Header/Header.js","constant/Constant.js","actions/HomeActions.js","components/Reusable/Button/Button.js","components/Reusable/List/List.js","components/Content/WelcomePage/WelcomePage.js","components/Select/Select.js","components/Link/Link.js","pages/ChatBody.js","components/Footer/Footer.js","pages/ChatBot.js","App.js","services/ServiceEngine.js","sagas/HomeActionSaga.js","sagas/index.js","reducers/HomeReducer.js","reducers/index.js","data/store.js","index.js"],"names":["module","exports","Boolean","window","location","hostname","match","Header","props","class","style","flexGrow","actionTypes","setLoadingState","value","type","boolValue","fetchChatDataSuccess","data","Button","styled","button","connect","state","baseUrl","home","dispatch","handleTopicClicked","topicId","url","actions","id","text","onClick","NavItems","ul","NavItem","li","recentQuestionList","map","item","index","key","question_name","Text","div","Wrapper","section","topicsList","fetchTopics","fetchRecentQuestion","useEffect","alt","src","logo","width","height","length","topic_id","topic_name","css","SelectDiv","select","Option","option","Select","onChange","event","handleQuerySelection","document","getElementById","disabled","selected","hidden","optionArr","push","queId","que","options","LinkOuterDiv","Image","img","Link","display","href","target","baseInputStyles","OuterDiv","UserDiv","BotName","UserName","UserMessageDiv","BotMessageDiv","BotMessageOuter","BotImage","BotMessage","chatData","fetchSelectedQueAnswer","useState","appendChild","setAppendChild","chatText","user","primaryText","UserContent","questionList","secondaryText","marginTop","BotContent","buttonType","buttonContent","concat","chatContent","FooterDiv","footer","Input","input","Footer","placeholder","doNavigate","storeBaseUrl","App","domElement","console","log","name","getAttribute","configAttr","config","classes","headerStyle","ServiceEngine","doAxiosGet","a","axios","get","then","response","results","this","fetchTopicsList","fetchRecentQuestionsList","fetchChatData","fetchQuestionAnswerRes","getState","action","service","put","payload","Service","details","image","title","description","watchHomeData","takeEvery","initialState","isLoading","rootReducer","combineReducers","sagaMiddleware","createSagaMiddleware","store","createStore","applyMiddleware","run","querySelectorAll","forEach","Div","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.6dc1d3ad.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/deepthought.f74036e6.png\";","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport './Header.css';\r\nimport styled from 'styled-components';\r\nconst Header =(props) => {\r\n    return (\r\n        <div class='header-text'>\r\n            <div style={{flexGrow:'1'}} class='header-inner'>Help and Support</div>\r\n            <div class='header-inner'>Close</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Header;","export const actionTypes = {\r\n    FETCH_TOPICS: 'FETCH_TOPICS',\r\n    FETCH_TOPICS_SUCCESS: 'FETCH_TOPICS_SUCCESS',\r\n    FETCH_RECENT_QUESTIONS: 'FETCH_RECENT_QUESTIONS',\r\n    FETCH_RECENT_QUESTIONS_SUCCESS: 'FETCH_RECENT_QUESTIONS_SUCCESS',\r\n    TOPIC_CLICKED: 'TOPIC_CLICKED',\r\n    DO_NAVIGATE: 'DO_NAVIGATE',\r\n    FETCH_CHAT_DATA_SUCCESS: 'FETCH_CHAT_DATA_SUCCESS',\r\n    LOADING_STATE: 'LOADING_STATE',\r\n    STORE_BASE_URL: 'STORE_BASE_URL',\r\n    FETCH_QUES_ANSWER: 'FETCH_QUES_ANSWER',\r\n    FETCH_QUES_ANSWER_SUCCESS: 'FETCH_QUES_ANSWER_SUCCESS'\r\n}","import { actionTypes } from '../constant/Constant';\r\n\r\nexport const storeBaseUrl = (url) => {\r\n    return {\r\n        type: actionTypes.STORE_BASE_URL,\r\n        baseUrl: url\r\n    };\r\n};\r\n\r\nexport const fetchTopics = (url) => {\r\n    return {\r\n        type: actionTypes.FETCH_TOPICS,\r\n        url: url\r\n    };\r\n};\r\n\r\nexport const fetchTopicListSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_TOPICS_SUCCESS,\r\n        payload: data\r\n    };\r\n};\r\n\r\n\r\nexport const fetchRecentQuestion = (url) => {\r\n    return {\r\n        type: actionTypes.FETCH_RECENT_QUESTIONS,\r\n        url: url\r\n    };\r\n};\r\n\r\nexport const fetchRecentQuestionsListSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_RECENT_QUESTIONS_SUCCESS,\r\n        data: data\r\n    };\r\n};\r\n\r\nexport const handleTopicClicked = (url, topicId) => {\r\n    return {\r\n        type: actionTypes.TOPIC_CLICKED,\r\n        baseUrl:url,\r\n        topicId: topicId\r\n    };\r\n};\r\n\r\nexport const navigateToChatPage = (doNavigate) => {\r\n    return {\r\n        type: actionTypes.DO_NAVIGATE,\r\n        doNavigate: doNavigate\r\n    };\r\n};\r\n\r\nexport const setLoadingState = (value) => {\r\n    return {\r\n        type: actionTypes.LOADING_STATE,\r\n        boolValue: value\r\n    };\r\n};\r\n\r\nexport const fetchChatDataSuccess = (data) => {\r\n    return {\r\n        type: actionTypes.FETCH_CHAT_DATA_SUCCESS,\r\n        data: data\r\n    };\r\n};\r\n\r\nexport const fetchSelectedQueAnswer = (queId) => {\r\n    return {\r\n        type: actionTypes.FETCH_QUES_ANSWER,\r\n        queId: queId\r\n    }\r\n}\r\n// export const fetchChatDataSuccess = (data) => {\r\n//     return {\r\n//         type: actionTypes.FETCH_QUES_ANSWER_SUCCESS,\r\n//         data: data\r\n//     }\r\n// }\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport './Button.css';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../../actions/index';\r\n\r\nconst Button = styled.button`\r\n    margin-right: 5px;\r\n    font-size: 11px;\r\n    line-height: 13px;\r\n    border: 1px solid #49afd9;\r\n    box-sizing: border-box;\r\n    border-radius: 11px;\r\n    color: #49afd9;\r\n    background: transparent;\r\n`;\r\n\r\n\r\nconst WidgetButton = (props) => {\r\n\r\n    const { id, text, baseUrl } = props;\r\n    return <Button id={id}\r\n        onClick={() => props.handleTopicClicked(baseUrl, id)}\r\n    >{text}</Button>;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        baseUrl: state.home.baseUrl\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        handleTopicClicked: (baseUrl, topicId) => dispatch(actions.handleTopicClicked(baseUrl, topicId)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WidgetButton);\r\n","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\n\r\nconst NavItems = styled.ul`\r\n    list-style: none;\r\n    padding-left: 16px;\r\n    padding-right: 16px;\r\n`;\r\n\r\nconst NavItem = styled.li`\r\n    font-size: 13px;\r\n    color: #adbbc4;\r\n    padding: 8px 16px;\r\n    background: #22343C;\r\n    margin-bottom: 2px;\r\n`;\r\n\r\nconst list = [{ que: 'How do I setup marketplace' }, { que: 'How do I setup marketplace' }, { que: 'How do I setup marketplace' }];\r\nconst List = (props) => {\r\n    const quesList = () => {\r\n        return recentQuestionList.map((item, index) => {\r\n            return (\r\n                <NavItem key={index}>\r\n                    {item.question_name}\r\n                </NavItem>\r\n            );\r\n        });\r\n    };\r\n    const {recentQuestionList} = props;\r\n    return <NavItems>{quesList()}</NavItems>;\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        recentQuestionList: state.home.recentQuestionList\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        // fetchTopics: (url) => dispatch(actions.fetchTopics(url)),\r\n        // fetchRecentQuestion: (url) => dispatch(actions.fetchTopics(url)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(List);\r\n","import React, { useEffect } from 'react';\r\nimport './WelcomePage.css';\r\nimport logo from '../../../assets/images/deepthought.png';\r\nimport WidgetButton from '../../Reusable/Button/Button';\r\nimport List from '../../Reusable/List/List';\r\nimport styled from 'styled-components';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../../../actions/index';\r\n\r\nconst Text = styled.div`\r\n    color: #adbbc4;\r\n    margin-left: 16px;\r\n    font-family: Metropolis;\r\n    font-size: 13px;\r\n    line-height: 18px;\r\n    margin-top: 60px;\r\n`;\r\n\r\nconst Wrapper = styled.section`\r\n    margin-right: 56px;\r\n    margin-left: 56px;\r\n`;\r\n\r\nconst WelcomePage = (props) => {\r\n    useEffect(() => {\r\n        props.fetchTopics(props.baseUrl);\r\n        props.fetchRecentQuestion(props.baseUrl);\r\n    }, []);\r\n\r\n    const categoryButtonGroups = () => {\r\n        return topicsList.map((item) => {\r\n            return <WidgetButton id={item.topic_id} text={item.topic_name}></WidgetButton>;\r\n        });\r\n    };\r\n    const { topicsList } = props;\r\n    return (\r\n        <div>\r\n            <div>\r\n                <div class=\"welcome-icon\">\r\n                    <div class=\"welcome-image\">\r\n                        <img alt=\"Logo\" src={logo} width=\"81px\" height=\"81px\"></img>\r\n                    </div>\r\n                </div>\r\n\r\n                <h6 class=\"person-text\">Hello Jane!</h6>\r\n                <h6 class=\"person-text\">What can I help you with?</h6>\r\n                {topicsList.length && <Wrapper>{categoryButtonGroups()}</Wrapper>}\r\n            </div>\r\n            <div>\r\n                <Text>Recent Questions</Text>\r\n                <List></List>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        topicsList: state.home.topicsList\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchTopics: (url) => dispatch(actions.fetchTopics(url)),\r\n        fetchRecentQuestion: (url) => dispatch(actions.fetchRecentQuestion(url)),\r\n    };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(WelcomePage);\r\n","import React from 'react';\r\nimport '@clr/core/select/register.js'\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst baseInputStyles = css`\r\n    color: #FFFFFF;\r\n    font-family: Metropolis;\r\n    font-size: 14px;\r\n`;\r\n\r\nconst SelectDiv = styled.select`\r\nborder: none;\r\nbackground: transparent;\r\nmax-width: 219px;\r\nmin-width: 219px;\r\ncolor: white;\r\nfont-family: Metropolis;\r\nfont-size: 13px;\r\nline-height: 24px;\r\nmargin-top:12px; \r\n`\r\n\r\nconst Option = styled.option`\r\nbackground-color:#22343C;\r\nfont-size:14px;\r\nline-height: 11px;\r\ncolor: #ADBBC4;\r\nfont-family: Metropolis;\r\npadding: 8px 24px;\r\nmargin: 8px 24px;\r\n`\r\n\r\nconst Select = (props) => {\r\n\r\n\r\n    const options = () => {\r\n        let optionArr = [];\r\n        optionArr.push(<Option value=\"\" disabled selected hidden>Select your question</Option>);\r\n        optionArr = props.item.map((item) => {\r\n            return (\r\n                <Option value={item.queId}>{item.que}</Option>\r\n            )\r\n        });\r\n        return optionArr;\r\n    }\r\n\r\n    const handleQuerySelection = (event) => {\r\n        props.handleQuerySelection(document.getElementById(\"select\").value);\r\n    }\r\n    return (\r\n        <SelectDiv id='select'\r\n            onChange={handleQuerySelection}\r\n        >\r\n            <Option value=\"\" disabled selected hidden>Select your question</Option>\r\n            {options()}\r\n        </SelectDiv>\r\n    )\r\n}\r\n\r\nexport default Select;","import React from 'react';\r\nimport styled, { css } from 'styled-components';\r\n\r\nconst LinkOuterDiv = styled.div`\r\n    position: relative;\r\n    width: 236px;\r\n    height: 86px;\r\n    background: #FFFFFF;\r\n    border-radius: 4px;\r\n    display:flex;\r\n`;\r\n\r\nconst Image = styled.img`\r\nbackground: #C4C4C4;\r\nborder-radius: 4px;\r\nmargin: 8px;\r\n`\r\n\r\nconst Text = styled.div`\r\ncolor: #565656;\r\nfont-family: Metropolis;\r\nfont-size: 13px;\r\nline-height: 18px;\r\nwidth: 143px;\r\nheight: 36px;\r\nalign-items: center;\r\n`\r\n\r\nconst Link = (props) => {\r\n    return (\r\n        <a style={{display:'block'}} href='https://confluence.eng.vmware.com/display/DEEPT/DeepThought+User+Guide'\r\n        target='_blank'>\r\n        <LinkOuterDiv>\r\n            <Image width='73px' height='69px'></Image>\r\n            <Text>\r\n                <div>2.1 Setup your model step by step</div>\r\n                <div>Lorem ipsum dolor sit amet, consectetur ...</div>\r\n            </Text>\r\n        </LinkOuterDiv>\r\n        </a>\r\n    )\r\n}\r\n\r\nexport default Link;","import React, { useEffect, useState } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport logo from '../assets/images/deepthought.png';\r\nimport * as actions from '../actions/index';\r\nimport styled, { css } from 'styled-components';\r\nimport Select from '../components/Select/Select';\r\nimport Link from '../components/Link/Link';\r\nimport './ChatBot.css';\r\n\r\nconst baseInputStyles = css`\r\n    color: #FFFFFF;\r\n    font-family: Metropolis;\r\n    font-size: 14px;\r\n`;\r\n\r\nconst OuterDiv = styled.div`\r\n    position: relative;\r\n`;\r\n\r\nconst UserDiv = styled.div`\r\n    text-align: right; \r\n    ${baseInputStyles}   \r\n`\r\nconst BotName = styled.div`\r\n    ${baseInputStyles} \r\n    font-size: 10px;\r\n    margin-left: 69px;\r\n    margin-top: 16px;\r\n`\r\n\r\nconst UserName = styled.div`\r\n    ${baseInputStyles} \r\n    font-size: 10px;\r\n    margin-right: 88px;\r\n    margin-top:16px;\r\n`\r\n\r\nconst UserMessageDiv = styled.div`\r\n    background-color: #314351;\r\n    border-radius: 4px;\r\n    display: inline-block;\r\n    padding: 4px 12px;\r\n    line-height: 1.25;\r\n    display: inline-block;\r\n    vertical-align: top;\r\n    text-align: left;\r\n    min-height: 0;\r\n    word-break: break-word;\r\n    white-space: pre-wrap;\r\n    overflow-wrap: break-word;\r\n    max-width: 256px;\r\n    box-sizing: border-box;\r\n    margin: 1px 0;\r\n    margin-right: 16px;\r\n    line-height: 24px;\r\n    height: 29px;\r\n    margin-right: 16px;\r\n`\r\n\r\nconst BotMessageDiv = styled.div`\r\npadding: 8px 12px;\r\n    line-height: 1.25;\r\n    background-color: #314351;\r\n    vertical-align: top;\r\n    text-align: left;\r\n    min-height: 0;\r\n    word-break: break-word;\r\n    white-space: pre-wrap;\r\n    overflow-wrap: break-word;\r\n    max-width: 256px;\r\n    margin: 1px 0;\r\n    border-radius: 4px;\r\n    box-sizing: border-box;\r\n`\r\nconst BotMessageOuter = styled.div`\r\npadding-right: 32px;\r\nmargin-left: 8px;\r\nposition: relative;\r\n`\r\nconst BotImage = styled.div`\r\n    display: inline;\r\n    margin-left: 16px;\r\n`\r\nconst BotMessage = styled.div`\r\n    display: flex;\r\n    text-align: right; \r\n    color: #FFFFFF; \r\n`\r\nconst Image = styled.img`\r\nborder-radius: 50%;\r\n`\r\n\r\nconst ChatBody = (props) => {\r\n    const [appendChild, setAppendChild] = useState([]);\r\n    useEffect(() => {\r\n        if (props.chatData.length) {\r\n            chatContent();\r\n        }\r\n    }, [props.chatData]);\r\n\r\n    const UserContent = (item) => {\r\n        return (\r\n            <OuterDiv>\r\n                <UserDiv>\r\n                    <UserName>You</UserName>\r\n                    <UserMessageDiv>\r\n                        <span>{item.primaryText}</span>\r\n                    </UserMessageDiv>\r\n                </UserDiv>\r\n            </OuterDiv>\r\n        )\r\n    }\r\n\r\n    const BotContent = (item) => {\r\n        return (\r\n            <>\r\n                <BotName>Deepthought</BotName>\r\n                <BotMessage>\r\n                    <BotImage>\r\n                        <Image alt=\"Logo\" src={logo} width=\"45px\" height=\"45px\"></Image>\r\n                    </BotImage>\r\n                    <BotMessageOuter>\r\n                        <BotMessageDiv>\r\n                            <span>{item.primaryText}</span>\r\n                            {item.type === 'select' && (\r\n                                <Select item={item.questionList} handleQuerySelection={handleQuerySelection}></Select>\r\n                            )}\r\n                            {item.type === 'link' && (\r\n                                <Link></Link>\r\n                            )}\r\n                        </BotMessageDiv>\r\n                        {item.secondaryText && (\r\n                            <BotMessageDiv style={{ marginTop: '5px' }}>\r\n                                <span>{item.secondaryText}</span>\r\n                            </BotMessageDiv>\r\n                        )}\r\n                    </BotMessageOuter>\r\n                </BotMessage>\r\n            </>\r\n        )\r\n    }\r\n\r\n    const buttonContent = (buttonType) => {\r\n        if (buttonType === 'icon') {\r\n            return (\r\n                <div>\r\n                    <button>OK</button>\r\n                    <button>Confirm</button>\r\n                </div>\r\n            )\r\n        }\r\n\r\n    }\r\n    function chatContent() {\r\n\r\n        let chatText = props.chatData.map((item) => {\r\n            if (item.user === 1) {\r\n                return (\r\n                    <>\r\n                    {UserContent(item) }\r\n                    </>\r\n                )\r\n               \r\n\r\n            } else {\r\n                return (\r\n                    <div>\r\n                        {item.type !== 'button' ? (\r\n                            BotContent(item)\r\n                        ) : (\r\n                                buttonContent(item.buttonType)\r\n                            )}\r\n                    </div>\r\n                )\r\n            }\r\n        });\r\n\r\n        let data = [...appendChild];\r\n        // data.push(chatText);\r\n        data = data.concat(chatText);\r\n        setAppendChild(data);\r\n    }\r\n    function handleQuerySelection(queId) {\r\n        fetchSelectedQueAnswer(queId);\r\n    }\r\n    const { fetchSelectedQueAnswer } = props;\r\n    return (\r\n        <div id='chatBody'>\r\n            <div>\r\n                {appendChild}\r\n            </div>\r\n            {/* {appendChild} */}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        chatData: state.home.chatData\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        fetchSelectedQueAnswer: (queId) => dispatch(actions.fetchSelectedQueAnswer(queId))\r\n    };\r\n};\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatBody);","import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst FooterDiv = styled.footer`\r\nposition: absolute;\r\nbottom: 0;\r\n`;\r\n\r\nconst Input = styled.input`\r\nwidth :386px;\r\nheight : 40px;\r\nradius :3px;\r\nbackground: #FFFFFF;\r\nborder: 1px solid #CCCCCC;\r\nbox-sizing: border-box;\r\nborder-radius: 3px;\r\nmargin: 12px 16px 52px 16px;\r\n`;\r\n\r\n// const icon = styled.\r\n\r\nconst Footer =(props) => {\r\n    return (\r\n        <FooterDiv>\r\n            <Input placeholder='Type Here...'></Input>\r\n\r\n        </FooterDiv>\r\n    );\r\n}\r\n\r\nexport default Footer;","import React, { useEffect } from 'react';\r\nimport './ChatBot.css';\r\nimport Header from '../components/Header/Header';\r\nimport WelcomePage from '../components/Content/WelcomePage/WelcomePage';\r\nimport ChatBody from './ChatBody';\r\nimport Footer from '../components/Footer/Footer';\r\nimport { connect } from 'react-redux';\r\nimport * as actions from '../actions/index';\r\n\r\nconst ChatBot = (props) => {\r\n\r\n    useEffect(() => {\r\n        props.storeBaseUrl(props.baseUrl);\r\n    }, []);\r\n    const { doNavigate } = props;\r\n    return (\r\n        <div class=\"chat-bot-body\">\r\n            <Header></Header>\r\n            {!doNavigate ? (\r\n                <WelcomePage baseUrl={props.baseUrl}></WelcomePage>\r\n            ) : (\r\n                    <ChatBody></ChatBody>\r\n                )}\r\n            <Footer></Footer>\r\n        </div>\r\n    );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        doNavigate: state.home.doNavigate\r\n    };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        storeBaseUrl: (url) => dispatch(actions.storeBaseUrl(url))\r\n    };\r\n};\r\n\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ChatBot);\r\n","import { LiveEditor, LiveError, LivePreview, LiveProvider } from \"react-live\";\r\nimport './App.css';\r\nimport React from 'react';\r\nimport ChatBot from './pages/ChatBot';\r\n\r\nfunction App({ domElement, ...props }) {\r\n  console.log(window.name);\r\n  const subreddit = domElement.getAttribute(\"data-subreddit\");\r\n  const baseUrl = domElement.getAttribute(\"data-base-url\");\r\n  const configAttr = domElement.getAttribute(\"data-config\");\r\n  const config = domElement.getAttribute(\"config\");\r\n  console.log(\"base api from other application:\" + baseUrl);\r\n  console.log('config attribute :'+ configAttr);\r\n  console.log('config:' + config);\r\n  const {classes} = props;\r\n  let headerStyle = (configAttr && configAttr.headerStyle) ? configAttr.headerStyle : 'footer';\r\n  return (\r\n    <div>\r\n\r\n    <ChatBot baseUrl={baseUrl}></ChatBot>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import axios from 'axios';\r\n\r\nexport default class ServiceEngine {\r\n  constructor(baseUrl) {\r\n    this.baseUrl = baseUrl;\r\n  }\r\n\r\n  doAxiosGet = async () => {\r\n    let results;\r\n    results = await axios.get(this.baseUrl).then((response) => {\r\n      return response;\r\n    });\r\n    return results;\r\n  };\r\n}\r\n","import { put, select } from 'redux-saga/effects';\r\nimport * as actions from '../actions/index';\r\nimport ServiceEngine from '../services/ServiceEngine';\r\n// import environment from '../environment/Environment';\r\n\r\nexport const getState = (state) => state.home;\r\n\r\nexport function* fetchTopicsList(action) {\r\n\r\n    let service = new ServiceEngine(\r\n        action.url + '/topics'\r\n        // `https://wavefront-api-deployment-scdc1-staging-ai-ml-coe.svc-stage.eng.vmware.com/api/faq/topics`\r\n    );\r\n    try {\r\n\r\n        let response = yield service.doAxiosGet();\r\n        if (response && response.data) {\r\n            yield put(actions.fetchTopicListSuccess(response.data));\r\n        }\r\n    } catch (error) {\r\n        // yield put(actions.setLoadingState(false));\r\n    }\r\n\r\n\r\n}\r\n\r\nexport function* fetchRecentQuestionsList(action) {\r\n    yield put(actions.setLoadingState(true));\r\n    let Service = new ServiceEngine(\r\n        action.url + '/recent?userid=42'\r\n    );\r\n    try {\r\n\r\n        let response = yield Service.doAxiosGet();\r\n        if (response && response.data) {\r\n            yield put(actions.fetchRecentQuestionsListSuccess(response.data));\r\n        }\r\n    } catch (error) {\r\n        yield put(actions.setLoadingState(false));\r\n    }\r\n}\r\n\r\nexport function* fetchChatData(action) {\r\n    yield put(actions.navigateToChatPage(true));\r\n    yield put(actions.setLoadingState(true));\r\n    let Service = new ServiceEngine(\r\n        action.baseUrl + `/que?topicid=${action.topicId}`\r\n    );\r\n    try {\r\n\r\n        let response = yield Service.doAxiosGet();\r\n        if (response && response.data) {\r\n            let chatData = [{\r\n                user: 1,\r\n                primaryText: 'Marketplace',\r\n                type: 'text'\r\n            },\r\n            {\r\n                user: 2,\r\n                primaryText: 'Please select your query from the FAQs related to Marketplace',\r\n                type: 'select',\r\n                questionList: [{\r\n                    que: 'Question1',\r\n                    queId: 1\r\n                },\r\n                {\r\n                    que: 'Question2',\r\n                    queId: 2\r\n                },\r\n                {\r\n                    que: 'Question3',\r\n                    queId: 3\r\n                },\r\n                {\r\n                    que: 'Question4',\r\n                    queId: 4\r\n                }]\r\n            }];\r\n            yield put(actions.fetchChatDataSuccess(chatData));\r\n        }\r\n    } catch (error) {\r\n        yield put(actions.setLoadingState(false));\r\n    }\r\n}\r\n\r\nexport function* fetchQuestionAnswerRes(action) {\r\n    // yield put(actions.setLoadingState(true));  -- instead of loading indicator have to show something else\r\n    let homeState = yield select(getState);\r\n    // let Service = new ServiceEngine(\r\n    //     homeState.baseUrl + `/que?quesid=${action.queId}`\r\n    // );\r\n    try {\r\n\r\n        // let response = yield Service.doAxiosGet();\r\n        // if (response && response.data) {\r\n        let chatData = [{\r\n            user: 1,\r\n            primaryText: 'How do I setup my Model?',\r\n            type: 'text'\r\n        },\r\n        {\r\n            user: 2,\r\n            primaryText: 'Here\\'s is a link I found that might help you',\r\n            type: 'link',\r\n            details: {\r\n                image: '',\r\n                title: '',\r\n                description: '',\r\n                url: ''\r\n            },\r\n            secondaryText: 'Did you find what you are looking for?'\r\n        },\r\n        {\r\n            user: 2,\r\n            type: 'button',\r\n            buttonType: 'icon'\r\n        }\r\n        ];\r\n        yield put(actions.fetchChatDataSuccess(chatData));\r\n    }\r\n    catch (error) {\r\n        yield put(actions.setLoadingState(false));\r\n    }\r\n}","import { takeEvery } from 'redux-saga/effects';\r\nimport { actionTypes } from '../constant/Constant';\r\nimport { fetchTopicsList, fetchRecentQuestionsList, fetchChatData, fetchQuestionAnswerRes } from './HomeActionSaga';\r\n\r\nexport function* watchHomeData() {\r\n    yield takeEvery(actionTypes.FETCH_TOPICS, fetchTopicsList);\r\n    yield takeEvery(actionTypes.FETCH_RECENT_QUESTIONS, fetchRecentQuestionsList);\r\n    yield takeEvery(actionTypes.TOPIC_CLICKED, fetchChatData);\r\n    yield takeEvery(actionTypes.FETCH_QUES_ANSWER, fetchQuestionAnswerRes);\r\n\r\n}\r\n","import { actionTypes } from '../constant/Constant';\r\n\r\nconst initialState = {\r\n    topicsList: [],\r\n    recentQuestionList: [],\r\n    doNavigate: false,\r\n    isLoading: false,\r\n    chatData: [],\r\n    baseUrl: ''\r\n};\r\n\r\nexport const HomeReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case actionTypes.LOADING_STATE:\r\n            return { ...state, isLoading: action.boolValue };\r\n        case actionTypes.STORE_BASE_URL:\r\n            return { ...state, baseUrl: action.baseUrl };\r\n        case actionTypes.FETCH_TOPICS_SUCCESS:\r\n            return { ...state, topicsList: action.payload };\r\n        case actionTypes.FETCH_RECENT_QUESTIONS_SUCCESS:\r\n            return { ...state, recentQuestionList: action.data };\r\n        case actionTypes.DO_NAVIGATE:\r\n            return { ...state, doNavigate: action.doNavigate };\r\n        case actionTypes.FETCH_CHAT_DATA_SUCCESS:\r\n           \r\n            return { ...state, chatData: action.data };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import { combineReducers } from 'redux';\r\nimport { HomeReducer } from './HomeReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    home: HomeReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport createSagaMiddleware from 'redux-saga';\r\nimport {\r\n    watchHomeData\r\n} from '../sagas';\r\nimport rootReducer from '../reducers';\r\n\r\n// we need an initialState otherwise , store will freak out\r\nconst initialState = {};\r\n\r\nconst sagaMiddleware = createSagaMiddleware();\r\n\r\n// redux sagas is a middleware that we apply to the store\r\nexport const store = createStore(rootReducer, initialState, applyMiddleware(sagaMiddleware));\r\nsagaMiddleware.run(watchHomeData);\r\n\r\nexport default store;\r\n","import * as serviceWorker from './serviceWorker';\r\n\r\nimport App from './App';\r\nimport React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport store from './data/store';\r\nimport { Provider } from 'react-redux';\r\n\r\n// ReactDOM.render(\r\n//   <React.StrictMode>\r\n//     <App />\r\n//   </React.StrictMode>,\r\n//   document.getElementById(\"javascriptExample\")\r\n// );\r\n\r\nconst WidgetDivs = document.querySelectorAll('.reddit_widget');\r\n\r\nWidgetDivs.forEach(Div => {\r\n  ReactDOM.render(\r\n    <Provider store={store}>\r\n    <React.StrictMode>\r\n      <App domElement={Div} />\r\n    </React.StrictMode>\r\n    </Provider>,\r\n    Div\r\n  );\r\n})\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}